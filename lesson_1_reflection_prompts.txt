How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It pinpointed where things were added or removed, so the changes were easy to see

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It shows the evolution of the file, 

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    pros for manually saving are each version is saved at a point in time and easier to reference back to that save, and makes reverting simpler. Pros of automatically saving (commit) are files are everything is up to date automatically 

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

    A program project consists of many files, while google docs are single files

How can you use the commands git log and git diff to view the history of files?

    log will show display committed snapshots, with the most recent commits showing up first. Command lists each commit with its SHA-1 checksum, author’s name and email, date written, and commit message. 

-p (modifier) shows the difference introduced in each commit. -2 limits the output to the last two entries. 

$ git log -p -2

Diff // shows the difference between files / commits

git log —-stat // shows some abbreviated stats for each commit (showing list of modified files, how many files changed and how many lines added and removed, with summary of information. 

How might using version control make you more confident to make changes that could break something?

    You can always revert back to an earlier version and see what was there before. 

Now that you have your workspace set up, what do you want to try using Git for?

    Saving a repository and making changes. 

	Also useful for saving papers
